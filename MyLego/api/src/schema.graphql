scalar Long

type Query{
EURprices:Float @cypher(statement:"""match (i:Item)-[:HAS_EUR_PRICE]->(p:EUR_MSRP)
where exists{
match (i:Item)-[r:HAS_PRODUCT_THEME{}]->(t:Theme)
where t.name = 'Technic'}
return round(avg(p.price),2)
""")

ItemList : [itemList] @cypher(statement:"""
match(i:Item)-[r:HAS_PRODUCT_THEME{year:'2014'}]->(t:Theme)
where t.name='Seasonal'
with i.image as image ,t.name as themeName
return {image:image , themeName:themeName} AS obj
""")
ThemeList : Int @cypher(statement:"MATCH (n:SubTheme) RETURN count(n)")

AvailList : [avail] @cypher(statement:"""
match (i:Item)-[:HAS_AVAILABILITY]->(a:availability)
WITH COUNT(a.name) AS CountAvail,a.name AS availabilityName
RETURN {CountAvail:CountAvail,availabilityName:availabilityName} AS obj

""")

PackagingList : [pack] @cypher(statement:"""
match (i:Item)-[:HAS_USD_PRICE]->(u:USD_MSRP)
where exists{
match (i:Item)-[r:HAS_PACKAGING]->(p:Packaging) where p.name='Box'}  AND u.price IS NOT NULL
with i.name as name , i.image as image ,u.price as price
return {name:name,price:price,image:image} AS obj
order by price DESC


""")





}
type pack{
name:String!
price : Float
image: String!
}
type avail{
  CountAvail: Int!
  availabilityName : String!
}

type itemList{
  image: String!
  themeName : String!


}

type Theme {
   _id: Long!
   id: String!
   name: String!
   has_parent_theme: [Theme] @relationship(type: "HAS_PARENT_THEME", direction: OUT)
   sets: [Set] @relationship(type: "HAS_THEME", direction: IN)
   items: [Item] @relationship(type: "HAS_PRODUCT_THEME", direction: IN)
}

type Set {
   _id: Long!
   name: String!
   num_parts: Int!
   set_num: String!
   year: Int!
   has_theme: [Theme] @relationship(type: "HAS_THEME", direction: OUT)
   inventorys: [Inventory] @relationship(type: "INVENTORY_FOR", direction: IN)
}


type PartCategory {
   _id: Long!
   id: String!
   name: String!
   parts: [Part] @relationship(type: "HAS_PART_CATEGORY", direction: IN)
}


type Part {
   _id: Long!
   name: String!
   part_num: String!
   has_part_category: [PartCategory] @relationship(type: "HAS_PART_CATEGORY", direction: OUT)
   inventoryparts: [InventoryPart] @relationship(type: "FOR_PART", direction: IN)
}


type Color {
   _id: Long!
   id: String!
   is_trans: String!
   name: String!
   rgb: String!
   inventoryparts: [InventoryPart] @relationship(type: "HAS_COLOR", direction: IN)
}


type Inventory {
   _id: Long!
   id: String!
   version: String!
   inventory_for: [Set] @relationship(type: "INVENTORY_FOR", direction: OUT)
    INVENTORY_FOR_rel: [INVENTORY_FOR]
   inventoryparts: [InventoryPart] @relationship(type: "ASSOCIATED_INVENTORY", direction: IN)
}
type InventoryPart {
   _id: Long!
   color_id: String!
   inventory_id: String!
   is_spare: Boolean!
   part_num: String!
   quantity: String!
   has_color: [Color] @relationship(type: "HAS_COLOR", direction: OUT)
   for_part: [Part] @relationship(type: "FOR_PART", direction: OUT)
   associated_inventory: [Inventory] @relationship(type: "ASSOCIATED_INVENTORY", direction: OUT)
}
type Item {
   _id: Long!
  image: String!
item_number: String
   name: String!
   has_packaging: [Packaging] @relationship(type: "HAS_PACKAGING", direction: OUT)
   has_availability: [availability] @relationship(type: "HAS_AVAILABILITY", direction: OUT)
   has_gbp_price: [GBP_MSRP] @relationship(type: "HAS_GBP_PRICE", direction: OUT)
   has_cad_price: [CAD_MSRP] @relationship(type: "HAS_CAD_PRICE", direction: OUT)
   has_eur_price: [EUR_MSRP] @relationship(type: "HAS_EUR_PRICE", direction: OUT)
   has_usd_price: [USD_MSRP] @relationship(type: "HAS_USD_PRICE", direction: OUT)
   has_product_theme: [Theme] @relationship(type: "HAS_PRODUCT_THEME", direction: OUT)

}


type GBP_MSRP {
   _id: Long!
   price: Float
   items: [Item] @relationship(type: "HAS_GBP_PRICE", direction: IN)
}

type CAD_MSRP {
   _id: Long!
   price: Float
}

type EUR_MSRP {
   _id: Long!
   price: Float
   items: [Item] @relationship(type: "HAS_EUR_PRICE", direction: IN)
}

type Packaging {
   _id: Long!
   name: String!
   items: [Item] @relationship(type: "HAS_PACKAGING", direction: IN)
}

type SubTheme {
   _id: Long!
   name: String!
}


type USD_MSRP {
   _id: Long!
   price: Float
   items: [Item] @relationship(type: "HAS_USD_PRICE", direction: IN)
}


type availability {
   _id: Long!
   name: String!
   items: [Item] @relationship(type: "HAS_AVAILABILITY", direction: IN)
}
type INVENTORY_FOR  {
  from: Inventory!
  to: Set!
  setQuantity: Int
}

type HAS_PRODUCT_THEME  {
  from: Item!
  to: Theme!
  year: String!
}
